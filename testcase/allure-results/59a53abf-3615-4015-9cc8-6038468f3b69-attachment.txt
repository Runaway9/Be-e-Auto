============================= test session starts =============================
platform win32 -- Python 3.11.4, pytest-8.1.1, pluggy-1.4.0
rootdir: D:\AutoTest\bee\testcase
plugins: allure-pytest-2.8.6
collected 1 item

test_login.py F                                                          [100%]

================================== FAILURES ===================================
____________________________ Test_Login.test_login ____________________________

self = <testcase.test_login.Test_Login object at 0x000002B9E6D12550>

    @allure.title("test_login")
    def test_login(self):
        self.driver = webdriver.Chrome()
>       login = Login_Page(self.driver).loginpage(username='15501411920', password='Runaway9')

test_login.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\pageobject\login_page.py:16: in loginpage
    self.input(loc=self.username, value=username)
..\base\basepage.py:10: in input
    locator = self.locator(loc).send_keys(value)
..\base\basepage.py:7: in locator
    return self.driver.find_element(*loc)
D:\Python311\Lib\site-packages\selenium\webdriver\remote\webdriver.py:741: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
D:\Python311\Lib\site-packages\selenium\webdriver\remote\webdriver.py:347: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B9E6ECAE50>
response = {'status': 404, 'value': '{"value":{"error":"no such window","message":"no such window: target window already closed\\...07FF718009B94]\\n\\tBaseThreadInitThunk [0x00007FF9B01E257D+29]\\n\\tRtlUserThreadStart [0x00007FF9B226AA48+40]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed
E       from unknown error: web view not found
E         (Session info: chrome=123.0.6312.106)
E       Stacktrace:
E       	GetHandleVerifier [0x00007FF7180A7032+63090]
E       	(No symbol) [0x00007FF718012C82]
E       	(No symbol) [0x00007FF717EAEC65]
E       	(No symbol) [0x00007FF717E8CA7C]
E       	(No symbol) [0x00007FF717F1D687]
E       	(No symbol) [0x00007FF717F32AC1]
E       	(No symbol) [0x00007FF717F16D83]
E       	(No symbol) [0x00007FF717EE83A8]
E       	(No symbol) [0x00007FF717EE9441]
E       	GetHandleVerifier [0x00007FF7184A25AD+4238317]
E       	GetHandleVerifier [0x00007FF7184DF70D+4488525]
E       	GetHandleVerifier [0x00007FF7184D79EF+4456495]
E       	GetHandleVerifier [0x00007FF718180576+953270]
E       	(No symbol) [0x00007FF71801E54F]
E       	(No symbol) [0x00007FF718019224]
E       	(No symbol) [0x00007FF71801935B]
E       	(No symbol) [0x00007FF718009B94]
E       	BaseThreadInitThunk [0x00007FF9B01E257D+29]
E       	RtlUserThreadStart [0x00007FF9B226AA48+40]

D:\Python311\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:229: NoSuchWindowException
=========================== short test summary info ===========================
FAILED test_login.py::Test_Login::test_login - selenium.common.exceptions.NoS...
============================== 1 failed in 2.69s ==============================
